{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"An AWS CFT template for GSLB",
  "Parameters":{
    "Zone":{
      "Description":"AWS offers a range of options for managing availability and resiliency for your applications. Architect your solution to use replicated VMs in Availability Zones to protect your apps and data from datacenter outages and maintenance events.",
      "Type":"AWS::EC2::AvailabilityZone::Name",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "ConstraintDescription":"supports only alphanumeric characters, spaces, dashes and underscores"
    },
    "SSHKeyName":{
      "Description":"A key pair,consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an Amazon EC2 instance.",
      "Type":"AWS::EC2::KeyPair::KeyName",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "ConstraintDescription":"supports only alphanumeric characters, spaces, dashes and underscores"
    },
    "AMIIDThunder":{
      "Description":"Choose from available ami id for a10 thunder instance. A10 Thunder ADC for Advanced Load Balancing - BYOL is set as a default ami id for us-east-1 region. Find more type of thunder images available with different capacity under respective regions. Go to aws -> ec2 -> launch instance -> Application and OS Images (Amazon Machine Image) -> search for acos vthunder -> AWS marketplace amis -> select the relevant thunder image -> click on continue -> copy ami id.",
      "Type": "String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "Default"       : "ami-0c6f62bbb84e4dea0"
    },
    "AMIIDLinux":{
      "Description":"Choose from available ami id for linux instance. Ubuntu Server 22.04 LTS (HVM), SSD Volume Type is set as a default ami id for us-east-1 region. Find more type of linux images available under different regions. Go to aws -> ec2 -> launch instance -> Application and OS Images (Amazon Machine Image) -> search for linux/ubuntu -> AWS marketplace amis -> select the relevant linux/ubuntu image -> copy ami id.",
      "Type": "String",
      "MinLength":"1",
      "MaxLength":"64",
      "AllowedPattern":"[-_ a-zA-Z0-9]*",
      "Default"       : "ami-053b0d53c279acc90"
    },
    "InstanceTypeThunder" : {
      "Description"   : "Choose from available instance/compute type supported for vThunder. Default instance type is m4.xlarge which contains 4 vCPU and 64 GiB memory. vThunder requires minimun 4 vCPU and 32 GiB memory, for more information check AWS marketplace product pricing section. In case required instance type is not available in the list, it can be added in the script. Go to aws -> ec2 -> launch instance -> Find and copy relevant instance type.",
      "Type"          : "String",
      "Default"       : "m4.xlarge",
	  "AllowedValues" : ["c4.xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "c5d.large",
        "c5d.9xlarge",
        "c5d.2xlarge",
        "c5d.4xlarge",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "g3.4xlarge",
        "g3.8xlarge",
        "i3.large",
        "i3.xlarge",
        "i3.2xlarge",
        "i3.4xlarge",
        "i3.8xlarge",
        "m5d.large",
        "m5d.xlarge",
        "m5d.2xlarge",
        "m5d.4xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "r5d.large",
        "r5d.xlarge",
        "r5d.2xlarge",
        "r5d.4xlarge",
        "r5.large",
        "r5.xlarge",
        "r5.2xlarge",
        "r5.4xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "z1d.large",
        "z1d.xlarge",
        "z1d.2xlarge",
        "z1d.3xlarge",
        "z1d.6xlarge"
      ],
     "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "InstanceTypeLinux" : {
      "Description"   : "Choose from available instance/compute type supported for Linux will be used for configuring web server to test traffic. Default instance type is t2.micro which contains 1 vCPU and 1 GiB memory. In case required instance type is not available in the list, it can be added in the script. Go to aws -> ec2 -> launch instance -> Find and copy relevant instance type.",
      "Type"          : "String",
      "Default"       : "t2.micro",
      "AllowedValues" : [ "t2.micro","m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m3.2xlarge", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge","p2.8xlarge", "r3.8xlarge", "d2.xlarge", "d2.2xlarge", "i2.8xlarge" ],
      "ConstraintDescription" : "must be a valid instance type."
    },
    "InstanceTenancy" : {
      "Description" : "Tenancy defines how EC2 instances are distributed across physical hardware and affects pricing. Specifies if the Amazon EC2 instance is hosted on shared or single-tenant hardware.",
      "Type"        : "String",
      "MinLength"   : "7",
      "MaxLength"   : "9",
      "Default"     : "default",
      "AllowedValues" : ["default", "dedicated"],
      "ConstraintDescription" : "must be default or dedicated"
    },
    "CidrVPC" : {
      "Description" : "CIDR of the VPC.",
      "Type"        : "String",
      "MinLength"   : "9",
      "MaxLength"   : "18",
      "Default"     : "10.2.0.0/16",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "CidrMgmtSubnet" : {
      "Description" : "CIDR of the Management Subnet.",
      "Type"        : "String",
      "MinLength"   : "9",
      "MaxLength"   : "18",
      "Default"     : "10.2.1.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "CidrDataSubnet1" : {
      "Description" : "CIDR of the data Subnet.",
      "Type"        : "String",
      "MinLength"   : "9",
      "MaxLength"   : "18",
      "Default"     : "10.2.2.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "CidrDataSubnet2" : {
      "Description" : "CIDR of the data Subnet.",
      "Type"        : "String",
      "MinLength"   : "9",
      "MaxLength"   : "18",
      "Default"     : "10.2.3.0/24",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrimaryIpGSLBMember" : {
      "Description" : "Client interface primary IP of GSLB Member in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.117",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "PrimaryIpSite1" : {
      "Description" : "Client interface primary IP of site1 in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.118",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "PrimaryIpSite2" : {
      "Description" : "Client interface primary IP of site2 in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.119",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "VIPGSLBMember" : {
      "Description" : "VIP of GSLB Member in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.121",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "VIPSite1" : {
      "Description" : "VIP of Site1 in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.123",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "VIPSite2" : {
      "Description" : "VIP of Site2 in region2.",
      "Type"        : "String",
      "Default"     : "10.2.2.124",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "Must be a valid IP address."
    },
    "TagkeyName" : {
      "Type" : "String",
      "Default" : "name",
      "Description": "Custom tag key which will be added to all resources created via CFT. Tags are used to track the cost of resources in AWS Cost Explorer."
    },
    "TagKeyValue" : {
      "Type" : "String",
      "Default" : "a10-vthunder-adc",
      "Description": "Custom tag key which will be added to all resources created via CFT. Tags are used to track the cost of resources in AWS Cost Explorer."
    }
  },
  "Mappings" : {
    "InstanceType2Arch" : {
      "c4.xlarge":    { "Arch" : "HVM64"  },
      "c4.4xlarge":   { "Arch" : "HVM64"  },
      "c4.8xlarge":   { "Arch" : "HVM64"  },
      "d2.xlarge":    { "Arch" : "HVM64"  },
      "d2.2xlarge":   { "Arch" : "HVM64"  },
      "d2.4xlarge":   { "Arch" : "HVM64"  },
      "d2.8xlarge":   { "Arch" : "HVM64"  },
      "m4.xlarge":    { "Arch" : "HVM64"  },
      "m4.2xlarge":   { "Arch" : "HVM64"  },
      "m4.4xlarge":   { "Arch" : "HVM64"  },
      "m4.10xlarge":  { "Arch" : "HVM64"  },
      "i2.xlarge":    { "Arch" : "HVM64"  },
      "i2.2xlarge":   { "Arch" : "HVM64"  },
      "i2.4xlarge":   { "Arch" : "HVM64"  },
      "i2.8xlarge":   { "Arch" : "HVM64"  },
      "c5d.large":    { "Arch" : "HVM64"  },
      "c5d.9xlarge":  { "Arch" : "HVM64"  },
      "c5d.2xlarge":  { "Arch" : "HVM64"  },
      "c5d.4xlarge":  { "Arch" : "HVM64"  },
      "c5.xlarge":    { "Arch" : "HVM64"  },
      "c5.2xlarge":   { "Arch" : "HVM64"  },
      "c5.4xlarge":   { "Arch" : "HVM64"  },
      "c5.9xlarge":   { "Arch" : "HVM64"  },
      "g3.4xlarge":   { "Arch" : "HVM64"  },
      "g3.8xlarge":   { "Arch" : "HVM64"  },
      "i3.large":     { "Arch" : "HVM64"  },
      "i3.xlarge":    { "Arch" : "HVM64"  },
      "i3.2xlarge":   { "Arch" : "HVM64"  },
      "i3.4xlarge":   { "Arch" : "HVM64"  },
      "i3.8xlarge":   { "Arch" : "HVM64"  },
      "m5d.large":    { "Arch" : "HVM64"  },
      "m5d.xlarge":   { "Arch" : "HVM64"  },
      "m5d.2xlarge":  { "Arch" : "HVM64"  },
      "m5d.4xlarge":  { "Arch" : "HVM64"  },
      "m5.large":     { "Arch" : "HVM64"  },
      "m5.xlarge":    { "Arch" : "HVM64"  },
      "m5.2xlarge":   { "Arch" : "HVM64"  },
      "m5.4xlarge":   { "Arch" : "HVM64"  },
      "r5d.large":    { "Arch" : "HVM64"  },
      "r5d.xlarge":   { "Arch" : "HVM64"  },
      "r5d.2xlarge":  { "Arch" : "HVM64"  },
      "r5d.4xlarge":  { "Arch" : "HVM64"  },
      "r5.large":     { "Arch" : "HVM64"  },
      "r5.xlarge":    { "Arch" : "HVM64"  },
      "r5.2xlarge":   { "Arch" : "HVM64"  },
      "r5.4xlarge":   { "Arch" : "HVM64"  },
      "r4.large":     { "Arch" : "HVM64"  },
      "r4.xlarge":    { "Arch" : "HVM64"  },
      "r4.2xlarge":   { "Arch" : "HVM64"  },
      "r4.4xlarge":   { "Arch" : "HVM64"  },
      "r4.8xlarge":   { "Arch" : "HVM64"  },
      "t3.medium":    { "Arch" : "HVM64"  },
      "t3.large":     { "Arch" : "HVM64"  },
      "t3.xlarge":    { "Arch" : "HVM64"  },
      "t3.2xlarge":   { "Arch" : "HVM64"  },
      "z1d.large":    { "Arch" : "HVM64"  },
      "z1d.xlarge":   { "Arch" : "HVM64"  },
      "z1d.2xlarge":  { "Arch" : "HVM64"  },
      "z1d.3xlarge":  { "Arch" : "HVM64"  },
      "z1d.6xlarge":  { "Arch" : "HVM64"  }
    }
  },
  "Resources": {
    "vThunderVPCRegion2": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref" : "CidrVPC"
        },
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-vpc" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]

      }
    },
    "MgmtSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vThunderVPCRegion2"
        },
        "AvailabilityZone" :{ "Ref" : "Zone" },
        "CidrBlock": {
          "Ref" : "CidrMgmtSubnet"
        },
        "Tags": [
          {
            "Key": "Name",

            "Value": {"Fn::Sub":"${AWS::StackName}-vpc-mgmt-sub1"}
          },
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "DataSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vThunderVPCRegion2"
        },
        "AvailabilityZone" :{ "Ref" : "Zone" },
        "CidrBlock": {
          "Ref" : "CidrDataSubnet1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value":{"Fn::Sub":"${AWS::StackName}-vpc-data-sub1"}
          },
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "DataSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "vThunderVPCRegion2"
        },
        "AvailabilityZone" :{ "Ref" : "Zone" },
        "CidrBlock": {
          "Ref" : "CidrDataSubnet2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value":{"Fn::Sub":"${AWS::StackName}-vpc-data-sub2"}
          },
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },

    "vThunderSecurityGroupMgmtRegion2" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP, HTTPS,ICMP,SNMP,NTP and SSH access",
        "VpcId" : { "Ref" : "vThunderVPCRegion2" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" }   ,
          { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" },
		   { "IpProtocol" : "udp", "FromPort" : "161", "ToPort" : "161", "CidrIp" : "0.0.0.0/0" },
		  { "IpProtocol" : "tcp", "FromPort" : "123", "ToPort" : "123", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "4149", "ToPort" : "4149", "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "-1", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-sg-mgmt" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "vThunderSecurityGroupDataRegion2" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP, HTTPS,ICMP and UDP access",
        "VpcId" : { "Ref" : "vThunderVPCRegion2" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "udp", "FromPort" : "0", "ToPort" : "65535", "CidrIp" : "0.0.0.0/0" },
		  { "IpProtocol" : "icmp", "FromPort" : "-1", "ToPort" : "-1", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "4149", "ToPort" : "4149", "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "-1", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-sg-data" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "MgmtNetworkInterfaceControllerRegion2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "MgmtSubnet" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupMgmtRegion2" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst1-mgmt-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ClientNetworkInterfaceControllerRegion2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet1" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "PrivateIpAddresses" :[{
          "Primary" :true ,
          "PrivateIpAddress" :{"Ref" : "PrimaryIpGSLBMember"}
        },{
          "Primary" : false,
          "PrivateIpAddress" : {"Ref" : "VIPGSLBMember"}
        }],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst1-data-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ServerNetworkInterfaceControllerRegion2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet2" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst1-data-nic2" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "MgmtNetworkInterfaceSite1Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "MgmtSubnet" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupMgmtRegion2" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst2-mgmt-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ClientNetworkInterfaceSite1Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet1" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "PrivateIpAddresses" :[{
          "Primary" :true ,
          "PrivateIpAddress" :{"Ref" : "PrimaryIpSite1"}
        },{
          "Primary" : false,
          "PrivateIpAddress" : {"Ref" : "VIPSite1"}
        }

        ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst2-data-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ServerNetworkInterfaceSite1Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet2" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "SecondaryPrivateIpAddressCount" : 1,
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst2-data-nic2" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "MgmtNetworkInterfaceSite2Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "MgmtSubnet" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupMgmtRegion2" } ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst3-mgmt-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ClientNetworkInterfaceSite2Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet1" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "PrivateIpAddresses" :[{
          "Primary" :true ,
          "PrivateIpAddress" :{"Ref" : "PrimaryIpSite2"}
        },{
          "Primary" : false,
          "PrivateIpAddress" : {"Ref" : "VIPSite2"}
        }

        ],
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst3-data-nic1" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "ServerNetworkInterfaceSite2Region2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "Description" : "Private network interface",
        "SubnetId" : { "Ref" : "DataSubnet2" },
        "GroupSet" : [ { "Ref" : "vThunderSecurityGroupDataRegion2" } ],
        "SecondaryPrivateIpAddressCount" : 1,
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst3-data-nic2"} },
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "Server1Region2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceTypeLinux" },
        "AvailabilityZone" : { "Ref" : "Zone" },
        "ImageId" : {"Ref" : "AMIIDLinux"},
        "Tags" : [

          {"Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-server3"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ],

        "NetworkInterfaces" : [
          { "AssociatePublicIpAddress": "true",
            "DeviceIndex" : "0",
            "SubnetId": { "Ref" : "DataSubnet2" },
            "GroupSet": [
              {
                "Ref": "vThunderSecurityGroupDataRegion2"
              }
            ]
          }
        ],
        "KeyName" : { "Ref" : "SSHKeyName" },
        "Tenancy" : { "Ref" : "InstanceTenancy" }
      }
    },
    "Server2Region2" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceTypeLinux" },
        "AvailabilityZone" : { "Ref" : "Zone" },
        "ImageId" : {"Ref" : "AMIIDLinux"},
        "Tags" : [

          {"Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-server4"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ],

        "NetworkInterfaces" : [
          { "AssociatePublicIpAddress": "true",
            "DeviceIndex" : "0",
            "SubnetId": { "Ref" : "DataSubnet2"},
            "GroupSet": [
              {
                "Ref": "vThunderSecurityGroupDataRegion2"
              }
            ]
          }
        ],
        "KeyName" : { "Ref" : "SSHKeyName" },
        "Tenancy" : { "Ref" : "InstanceTenancy" }
      }},
    "vThunderControllerRegion2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "MgmtNetworkInterfaceControllerRegion2","ClientNetworkInterfaceControllerRegion2","ServerNetworkInterfaceControllerRegion2"],
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceTypeThunder" },
        "AvailabilityZone" : { "Ref" : "Zone" },
        "ImageId" :  {"Ref" : "AMIIDThunder"},
        "Tags" : [

          {"Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-controller-region2"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ],

        "NetworkInterfaces" : [
          { "DeviceIndex" : "0",
            "NetworkInterfaceId" : {"Ref" : "MgmtNetworkInterfaceControllerRegion2"}
          },

          { "DeviceIndex" : "1",
            "NetworkInterfaceId" : {"Ref" : "ClientNetworkInterfaceControllerRegion2"}
          },
          { "DeviceIndex" : "2",
            "NetworkInterfaceId" : {"Ref" : "ServerNetworkInterfaceControllerRegion2"}
          }
        ],

        "KeyName" : { "Ref" : "SSHKeyName" },
        "Tenancy" : { "Ref" : "InstanceTenancy" }


      }
    },
    "vThunderSite1Region2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "MgmtNetworkInterfaceSite1Region2","ClientNetworkInterfaceSite1Region2","ServerNetworkInterfaceSite1Region2"],
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceTypeThunder" },
        "AvailabilityZone" : { "Ref" : "Zone" },
        "ImageId" :  {"Ref" : "AMIIDThunder"},
        "Tags" : [

          {"Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-site1-region2"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ],

        "NetworkInterfaces" : [
          { "DeviceIndex" : "0",
            "NetworkInterfaceId" : {"Ref" : "MgmtNetworkInterfaceSite1Region2"}
          },

          { "DeviceIndex" : "1",
            "NetworkInterfaceId" : {"Ref" : "ClientNetworkInterfaceSite1Region2"}
          },
          { "DeviceIndex" : "2",
            "NetworkInterfaceId" : {"Ref" : "ServerNetworkInterfaceSite1Region2"}
          }
        ],

        "KeyName" : { "Ref" : "SSHKeyName" },
        "Tenancy" : { "Ref" : "InstanceTenancy" }
      }
    },
    "vThunderSite2Region2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "MgmtNetworkInterfaceSite2Region2","ClientNetworkInterfaceSite2Region2","ServerNetworkInterfaceSite2Region2"],
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceTypeThunder" },
        "AvailabilityZone" : { "Ref" : "Zone" },
        "ImageId" :  {"Ref" : "AMIIDThunder"},
        "Tags" : [

          {"Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-site2-region2"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ],

        "NetworkInterfaces" : [
          { "DeviceIndex" : "0",
            "NetworkInterfaceId" : {"Ref" : "MgmtNetworkInterfaceSite2Region2"}
          },

          { "DeviceIndex" : "1",
            "NetworkInterfaceId" : {"Ref" : "ClientNetworkInterfaceSite2Region2"}
          },
          { "DeviceIndex" : "2",
            "NetworkInterfaceId" : {"Ref" : "ServerNetworkInterfaceSite2Region2"}
          }
        ],

        "KeyName" : { "Ref" : "SSHKeyName" },
        "Tenancy" : { "Ref" : "InstanceTenancy" }
      }
    },

    "vThunderEIPController1" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderControllerRegion2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst1-mgmt-nic1-ip" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderController1" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPController1", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "MgmtNetworkInterfaceControllerRegion2" }
      }},
    "vThunderEIPController2" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderControllerRegion2","ClientNetworkInterfaceControllerRegion2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst1-data1-nic1-ip" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderController2" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPController2", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "ClientNetworkInterfaceControllerRegion2" },
        "PrivateIpAddress": {"Ref" : "VIPGSLBMember"}
      }},
    "vThunderEIPSite11" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderSite1Region2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst2-mgmt-nic1-ip" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderSite11" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPSite11", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "MgmtNetworkInterfaceSite1Region2" }
      }},
    "vThunderEIPSite12" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderSite1Region2","ClientNetworkInterfaceSite1Region2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst2-data1-nic1-ip"} },
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderSite12" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPSite12", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "ClientNetworkInterfaceSite1Region2" },
        "PrivateIpAddress": {"Ref" : "VIPSite1"}
      }},
    "vThunderEIPSite21" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderSite2Region2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst3-mgmt-nic1-ip" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderSite21" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPSite21", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "MgmtNetworkInterfaceSite2Region2" }
      }},
    "vThunderEIPSite22" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : [ "vThunderSite2Region2","ClientNetworkInterfaceSite2Region2"],
      "Properties" : {
        "Domain" : "vpc",
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-inst3-data1-nic1-ip" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]
      }
    },
    "AssociatePublicIpvThunderSite22" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "vThunderEIPSite22", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "ClientNetworkInterfaceSite2Region2" },
        "PrivateIpAddress": {"Ref" : "VIPSite2"}
      }},

    "vThunderInternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "name", "Value" : {"Fn::Sub":"${AWS::StackName}-internet-gateway"}},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ] }

    },

    "AttachGatewayvThunder" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "vThunderVPCRegion2" },
        "InternetGatewayId" : { "Ref" : "vThunderInternetGateway" }


      }
    },
    "PublicRouteTablevThunderVPC" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "vThunderVPCRegion2" },
        "Tags" : [
          { "Key" : "Name", "Value" : {"Fn::Sub":"${AWS::StackName}-public-route-table" }},
          {"Key" : {
            "Ref" : "TagkeyName"
          },
            "Value": {
              "Ref" : "TagKeyValue"
            }
          }
        ]

      }},
    "PublicRoutevThunder" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGatewayvThunder",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTablevThunderVPC" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "vThunderInternetGateway" }


      }
    },
    "PublicSubnetRouteTablevThunderAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "MgmtSubnet" },
        "RouteTableId" : { "Ref" : "PublicRouteTablevThunderVPC" }
      }},
    "PublicSubnetRouteTablevThunderAssociationData1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DataSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTablevThunderVPC" }
      }},
    "PublicSubnetRouteTablevThunderAssociationData2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "DataSubnet2" },
        "RouteTableId" : { "Ref" : "PublicRouteTablevThunderVPC" }
      }}
  }}




